GUIA DE USO DO COMPONENTE THPROHTTP

DEFINIÇÃO E PADRÃO DE USO
A classe THProHttp é o componente central para realizar a comunicação HTTP (requisições a webservices). O padrão de uso envolve sua instanciação, a configuração de suas propriedades, a execução de um método de ação (como Post ou Get) e, por fim, a garantia de sua liberação da memória.

PROPRIEDADES E MÉTODOS ESSENCIAIS

Propriedades de Configuração
TimeOut: Integer
Define o tempo máximo de espera (em segundos) pela resposta do servidor.

Utf8: Boolean
Garante que o corpo da requisição e a resposta sejam tratados com a codificação de caracteres UTF-8.

WebService: String
Define a URL completa de destino (endpoint) da requisição.

RequestHeaders: TStringList
Coleção de strings para adicionar os cabeçalhos HTTP da requisição, como Authorization, x-api-key e Content-Type.

Métodos de Ação
Post(oJson: String): Boolean
Envia uma requisição do tipo POST. O parâmetro oJson é a string contendo o corpo (payload) da requisição. Retorna True para sucesso e False para falha.

Get(): Boolean
Envia uma requisição do tipo GET. Este método não possui parâmetros, pois os argumentos de uma busca GET devem ser parte da URL na propriedade WebService. Retorna True para sucesso e False para falha.

Propriedades de Resultado
HttpResultCode: Integer
Contém o código de status HTTP retornado pelo servidor (ex: 200, 401, 500).

HttpResult: String
Contém o corpo da resposta do servidor (em caso de sucesso) ou a mensagem de erro (em caso de falha).

FLUXO DE TRABALHO PARA REQUISIÇÕES

Instanciação e Segurança
Crie uma instância do THProHttp e encapsule toda a lógica em um bloco try...finally para garantir que o objeto seja liberado da memória com FreeAndNil, evitando vazamentos de recursos.

Configuração
Defina as propriedades da requisição (TimeOut, Utf8, WebService, RequestHeaders).

Execução
Chame o método de ação desejado (Post ou Get).

Tratamento da Resposta
Verifique o retorno booleano do método. Se for False, a requisição falhou e os detalhes do erro podem ser obtidos das propriedades HttpResultCode e HttpResult. Se for True, a requisição foi bem-sucedida e o resultado está em HttpResult.

EXEMPLOS DE CÓDIGO EM DELPHI PASCAL

EXEMPLO 1: ENVIANDO DADOS (MÉTODO POST)
O procedimento enviaHttpPedido demonstra o algoritmo para enviar dados JSON.
procedure enviaHttpPedido(oJson : String);
var
H : THProHttp;
begin
H := THProHttp.Create;
try
H.TimeOut := 120;
H.Utf8 := True;
H.WebService := 'https://sandbox.api2.aprovador.com/v1/documents';
H.RequestHeaders.Add('Authorization: a6211b49-53f2-44aa-b52d-b836f1084580');
H.RequestHeaders.Add('x-api-key: a6211b49-53f2-44aa-b52d-b836f1084580');
H.RequestHeaders.Add('Content-Type: application/json');
if not H.Post(oJson) then
begin
atencao('Não foi possível enviar a solicitação via webservice;;Erro: '
+ IntToStr(H.HttpResultCode) + ' - ' + H.HttpResult);
end
else
begin
Atencao('Enviado ao Aprovador');
end;
finally
FreeAndNil(H);
end;
end;

EXEMPLO 2: CONSULTANDO DADOS (MÉTODO GET)
O procedimento consultaHttpExemplo demonstra o algoritmo para obter dados de um endpoint. A lógica é similar, mas usa o método Get e não envia um corpo de requisição.

procedure consultaHttpExemplo(const cID: String);
var
H : THProHttp;
begin
H := THProHttp.Create;
try
H.TimeOut := 60;
H.Utf8 := True;
// Note que os parâmetros da busca são parte da URL
H.WebService := 'https://api.exemplo.com/v1/clientes/' + cID;

H.RequestHeaders.Add('Authorization: a6211b49-53f2-44aa-b52d-b836f1084580');
H.RequestHeaders.Add('Accept: application/json');

if not H.Get then
begin
atencao('Não foi possível consultar o serviço;;Erro: '
+ IntToStr(H.HttpResultCode) + ' - ' + H.HttpResult);
end
else
begin
// Em caso de sucesso, o H.HttpResult contém o JSON retornado
Atencao('Dados recebidos: ' + H.HttpResult);
end;
finally
FreeAndNil(H);
end;
end;