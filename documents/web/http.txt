 A documentação a seguir é baseada estritamente no seu código enviaHttpPedido, detalhando o processo para ser usado como base de conhecimento para um modelo RAG.

Documentação Técnica: Enviando Requisições POST com THProHttp
Este documento descreve o processo técnico para enviar uma requisição HTTP POST com um payload JSON e cabeçalhos customizados, utilizando a classe THProHttp conforme demonstrado no procedimento enviaHttpPedido.

Componente Principal: A Classe THProHttp
A classe THProHttp é o objeto central para realizar a comunicação HTTP. O padrão de uso envolve a sua instanciação, configuração de propriedades, execução do método e, por fim, a sua destruição.

Membros Essenciais Utilizados:

Propriedades de Configuração:

TimeOut: Integer: Define o tempo máximo de espera (em segundos).

Utf8: Boolean: Garante que o payload e a resposta sejam tratados como UTF-8.

WebService: String: Define a URL de destino (endpoint) da requisição.

RequestHeaders: TStringList: Coleção para adicionar os cabeçalhos HTTP da requisição.

Método de Ação:

Post(oJson: String): Boolean: Envia a requisição POST. O parâmetro oJson é a string contendo o corpo (payload) da requisição. Retorna True para sucesso (código HTTP 2xx) e False para falha.

Propriedades de Resultado:

HttpResultCode: Integer: Contém o código de status HTTP da resposta (ex: 200, 401, 500).

HttpResult: String: Contém o corpo da resposta do servidor ou a mensagem de erro.

Algoritmo de Envio da Requisição POST
O procedimento enviaHttpPedido segue um fluxo de trabalho estruturado para garantir a correta configuração e execução da requisição.

1. Instanciação e Bloco de Segurança:

Uma instância da classe THProHttp é criada (H := THProHttp.Create).

Todo o código é encapsulado em um bloco try...finally para garantir que o objeto H seja sempre liberado da memória com FreeAndNil(H), evitando vazamentos de recursos.

2. Configuração da Requisição:

Propriedades essenciais são definidas no objeto H.

H.TimeOut := 120;

H.Utf8 := True;

3. Definição do Endpoint:

A URL de destino é atribuída à propriedade WebService.

H.WebService := 'https://sandbox.api2.aprovador.com/v1/documents';

4. Configuração dos Cabeçalhos (Headers):

Os cabeçalhos HTTP necessários são adicionados à propriedade RequestHeaders usando o método Add. Cada cabeçalho é uma string no formato 'Chave: Valor'.

H.RequestHeaders.Add('Authorization: ...');

H.RequestHeaders.Add('x-api-key: ...');

H.RequestHeaders.Add('Content-Type: application/json');

5. Execução e Tratamento da Resposta:

O método H.Post(oJson) é chamado, enviando a requisição.

O retorno booleano do método é verificado em uma estrutura if.

Se False, a requisição falhou. O código de erro (H.HttpResultCode) e a mensagem de erro (H.HttpResult) são utilizados para notificar o usuário.

Se True, a requisição foi bem-sucedida.

PROCEDIMENTO PARA REQUISIÇÃO HTTP POST

DEFINIÇÃO
O procedimento enviaHttpPedido demonstra o algoritmo padrão para enviar dados no formato JSON para um webservice utilizando o componente THProHttp.

PASSOS DO ALGORITMO

Passo 1: Instanciação do Objeto
Um objeto do tipo THProHttp é criado em memória para manipular a requisição.

Passo 2: Configuração das Propriedades
As propriedades básicas da requisição são definidas.
TimeOut: Tempo máximo de espera pela resposta do servidor (em segundos).
Utf8: Garante que a codificação de caracteres utilizada é UTF-8.

Passo 3: Definição da URL
A propriedade WebService recebe a URL completa do endpoint para onde a requisição será enviada.

Passo 4: Adição dos Cabeçalhos (Headers)
Os cabeçalhos HTTP necessários para a autenticação e especificação do tipo de conteúdo são adicionados à requisição. Os mais comuns são Authorization, x-api-key e Content-Type.

Passo 5: Envio da Requisição
O método H.Post(oJson) é chamado para enviar os dados. Este método envia a requisição e retorna True em caso de sucesso ou False em caso de falha. O conteúdo JSON a ser enviado é passado como parâmetro.

Passo 6: Liberação de Recursos
Ao final do processo, independentemente de sucesso ou falha, o objeto THProHttp é liberado da memória para evitar vazamentos de recursos (memory leaks).

EXEMPLO DE CÓDIGO EM DELPHI PASCAL
procedure enviaHttpPedido(oJson : String);
var
H : THProHttp;
begin
H := THProHttp.Create;
try
H.TimeOut := 120;
H.Utf8 := True;
H.WebService := 'https://sandbox.api2.aprovador.com/v1/documents';
H.RequestHeaders.Add('Authorization: a6211b49-53f2-44aa-b52d-b836f1084580');
H.RequestHeaders.Add('x-api-key: a6211b49-53f2-44aa-b52d-b836f1084580');
H.RequestHeaders.Add('Content-Type: application/json');
if not H.Post(oJson) then
begin
  atencao('Não foi possível enviar a solicitação via webservice;;Erro: '
          + IntToStr(H.HttpResultCode) + ' - ' + H.HttpResult);
end
else
begin
  Atencao('Enviado ao Aprovador');
end;
finally
FreeAndNil(H);
end;
end;

TRATAMENTO DE RESPOSTA
Caso de Falha
Se o método H.Post retornar False, uma mensagem de atenção é exibida ao usuário, contendo o código de erro HTTP (H.HttpResultCode) e a mensagem de resultado (H.HttpResult) retornados pelo servidor.
Caso de Sucesso
Se o método H.Post retornar True, uma mensagem de sucesso ("Enviado ao Aprovador") é exibida ao usuário.